<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================= 
    Introduction to Service Design and Engineering Laboratory
    Description: ANT build script for the session on JAXB and Dozer 
    Author: cdparra
    
    Notes: 
    
    * This build file includes targets to download and install in your local project the Apache IVY jar
    * IVY is used to manage dependencies on projects (e.g., jaxb libraries, jackson libraries for json, etc.) 
    * 
       TO USE IVY IN YOUR PROJECTS IN ORDER TO GET MANAGE DEPENDENCIES, MAKE SURE THE FOLLOWING LINES ARE
       IN YOUR BUILD.XML UNTILL 'IVY-END-LINE'
       
       # The target "download-ivy" and "install-ivy" will download the ivy jar and place it in the "ivy" folder
       # 
-->
<project name="solution-assignment" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- PART 1: Ivy properties, download, installation and configuration -->
	<property name="ivy.install.version" value="2.4.0-rc1" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<!-- this targe will donwload ivy.jar if its inot in the "ivy" folder yet -->
	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<!--
			 ================================= 
			          target: install-ivy         
			            this target is not necessary if you put ivy.jar in your ant lib directory
			            if you already have ivy in your ant lib, you can simply remove this
			            target and the dependency the 'init' target has on it
			         ================================= 
			-->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<!--
			 try to load ivy here from local ivy dir, in case the user has not already dropped
			              it into ant's lib dir (note that the latter copy will always take precedence).
			              We will not fail as long as local lib dir exists (it may be empty) and
			              ivy is in at least one of ant's lib dir or the local lib dir. 
			-->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<!-- PART 2: General properties definitions -->
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="xjc.package" value="people.generated" />

	<!-- ================================= 
	          target: resolve downloads the dependencies to your lib folder              
	         ================================= -->
	<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="${lib.dir}/[artifact]-[type]-[revision].[ext]"/>
	</target>


	<!-- paths where ivy libraries will be downloaded, use them as classpathref in your compilation and running tasks  -->
	<path id="lib.path.id">
		<fileset dir="${lib.dir}" />
	</path>


	<path id="run.path.id">
		<path refid="lib.path.id" />
		<fileset dir="${build.dir}">
			<include name="*.class" />
			<include name="**/*.class" />
			<exclude name="**/*Test*" />
		</fileset>
	</path>

	<!-- PART 3: compilation and execution targets for this session -->
	<target name="init" depends="install-ivy, resolve">
		<echo message="Init has been called" />
		<mkdir dir="${build.dir}" />
		<echo message="${build.dir} has been created" />
	</target>

	<target name="clean">
		<echo message="Clean has been called" />
		<delete dir="${build.dir}" />
		<echo message="${build.dir} has been deleted" />
		<delete dir="${src.dir}/${xjc.package}" />
		<echo message="${src.dir}/${xjc.package} has been deleted" />
        <delete dir="${src.dir}/people" />
        <echo message="${src.dir}/people has been deleted" />
		<delete file="catalog.xml" />
		<echo message="catalog.xml has been deleted" />
        <delete file="people.xml" />
        <echo message="people.xml has been deleted" />
        <delete file="people.json" />
        <echo message="people.json has been deleted" />
        <delete dir="lib" />
        <mkdir dir="lib" />
        <echo message="lib directory has been cleaned" />
        <delete dir="ivy" />
        <echo message="ivy directory has been deleted" />
    </target>

	<target name="generate" depends="init">
		<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="lib.path.id">
		</taskdef>
		<xjc schema="misses.xsd" destdir="${src.dir}" package="${xjc.package}" />
	</target>

	<target name="compile" depends="init, generate">
		<echo message="Compile target has been called" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
		</javac>
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="*.xml" />
			</fileset>
		</copy>
	</target>

    <target name="execute.MarshallerToXML" >
        <echo message="Executing the marshaller from JAVA classes to an XML file" />
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="marshallerXML"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="execute.MarshallerToJSON">
        <echo message="Executing the marshaller from JAVA classes to an XML file" />
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="marshallerJSON"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="execute.UnMarshallXML">
        <echo message="Executing the UnMarshaller from the misses.xml file. Then printing it on the console" />
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="unmarshallerXML"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="execute.UnMarshallJSON">
        <echo message="Executing the UnMarshaller from the misses.xml file. Then printing it on the console" />
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="unmarshallerJSON"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="execute.printAll">
        <echo message="Executing the software. Loading the file containing the people list and then printing them.
                       People is divided in pages of at most 20 people. To choose which page to print specify with -DPage=X.
                       Where X is the page number." />
        <property name="Page" value="1"/>
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="printAll"></arg>
            <arg value="${Page}"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="execute.selectOnWeight">
        <echo message="Showing people that follows the selection parameter passed." />
        <property name="Page" value="1"/>
        <property name="Selection" value="=45kg" />
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="selectWeight"></arg>
            <arg value="${Selection}"></arg>
            <arg value="${Page}"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="execute.getHeightByID">
        <echo message="Executing getHeight method. Given an ID the software prints the Height of the person contained in the misses.xml file." />
        <property name="Id" value="1"/>
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="getHeight"></arg>
            <arg value="${Id}"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="execute.getWeightByID">
        <echo message="Executing getWeight method. Given an ID the software print the Weight of the person contained in the misses.xml file." />
        <property name="Id" value="1"/>
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="getWeight"></arg>
            <arg value="${Id}"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="execute.getHeightByName">
        <echo message="Executing getHeight method. Given the first name and the last name the software prints the Height of the person contained in the misses.xml file." />
        <property name="FirstName" value="Ruth"/>
        <property name="LastName" value="Malcomson" />
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="getHeight"></arg>
            <arg value="${FirstName}"></arg>
            <arg value="${LastName}"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>

    <target name="execute.getWeightByName">
        <echo message="Executing getWeight method. Given the first name and the last name the software prints the Weight of the person contained in the misses.xml file." />
        <property name="FirstName" value="Ruth"/>
        <property name="LastName" value="Malcomson" />
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="getHeight"></arg>
            <arg value="${FirstName}"></arg>
            <arg value="${LastName}"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>

    <target name="execute.getHealthProfile">
        <echo message="Executing getHealthProfile method. Given an ID the software print the Health Profile of the person contained in the misses.xml file." />
        <property name="Id" value="1"/>
        <java classname="HPMain" classpath="${build.dir}">
            <arg value="getHealthProﬁle"></arg>
            <arg value="${Id}"></arg>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </java>
    </target>

</project>